<?php

namespace app\models\form;

use app\models\Contact;

class ContactFormModel extends Contact
{
    public $userPhones;

    public function afterFind()
    {
        parent::afterFind();
        if ($phones = $this->phones) {
            foreach ($phones as $phone) {
                $this->userPhones[] = $phone->value;
            }
        }
    }

    public function beforeValidate()
    {
        foreach ($this->userPhones as &$phone) {
            if (str_starts_with($phone, '0')) {
                $phone = '38' . $phone;
            }
        }
        return parent::beforeValidate(); // TODO: Change the autogenerated stub
    }

    public function rules(): array
    {
        return [
            [['first_name', 'last_name', 'email', 'birth_date'], 'string'],
            [['first_name', 'last_name', 'email'], 'trim'],
            [['first_name', 'birth_date'], 'required'],
            ['email', 'email'],
            ['birth_date', 'date', 'format' => 'php:Y-m-d',
                'max' => (new \DateTime())->sub(new \DateInterval('P18Y'))->format('Y-m-d'),
                'tooBig' => 'Only 18 years old persons can be added!'
            ],
            ['userPhones', 'required'],
            ['userPhones', 'each', 'rule' => ['trim']],
            ['userPhones', 'validatePhones'],
        ];
    }

    public function validatePhones($attribute, $params = []): void
    {
        $phones = $this->{$attribute};
        $cleanPattern = '#[^0-9]#';
        $pattern = '#^380([0-9]{9})$#';
        if(count($phones) > $this->getMaxAmountOfPhones())
        {
            $this->addError($attribute, 'Max amount of phones is '.$this->getMaxAmountOfPhones());
        }

        foreach ($phones as $k => $phone) {
            $phones[$k] = preg_replace($cleanPattern, '', $phone);
        }
        $this->{$attribute} = $phones;
        $error = 'Wrong phone number';
        foreach ($phones as $phone) {
            if (!preg_match($pattern, $phone)) {
                $error .= '. +3801112223344 or 01112223344 can be used';
                $this->addError($attribute, $error);
            }
        }
    }

    public function getMaxAmountOfPhones(): int
    {
        return (int) \Yii::$app->params['maxAmountOfPhones'];
    }
}
